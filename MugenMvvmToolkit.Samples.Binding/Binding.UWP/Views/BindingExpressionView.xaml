<Page
    x:Class="Binding.UWP.Views.BindingExpressionView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:markupExtensions="using:MugenMvvmToolkit.UWP.MarkupExtensions"
    mc:Ignorable="d"
    d:DataContext="{Binding Source={StaticResource DesignBootstrapper}, Path=BindingExpressionViewModel}">

    <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <Grid.ChildrenTransitions>
            <TransitionCollection>
                <EntranceThemeTransition />
            </TransitionCollection>
        </Grid.ChildrenTransitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="140" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- Back button and page title -->
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="120" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Button Margin="39,59,39,0" Command="{Binding Path=CloseCommand}"
                    Style="{StaticResource NavigationBackButtonNormalStyle}"
                    VerticalAlignment="Top" />
            <TextBlock Text="{StaticResource AppName}" Style="{StaticResource HeaderTextBlockStyle}"
                       Grid.Column="1"
                       IsHitTestVisible="false" TextWrapping="NoWrap" VerticalAlignment="Bottom" Margin="0,0,30,40" />
        </Grid>


        <ScrollViewer Grid.Row="1" Margin="12,0,12,0">
            <StackPanel>
                <TextBox Header="Current text" markupExtensions:View.Bind="Text Text, Mode=TwoWay" Margin="1" />

                <TextBlock Text="LINQ-count of 'a' symbols (Text.Count(x => x == 'a'))" Margin="1"
                           TextWrapping="Wrap" Style="{StaticResource BaseTextBlockStyle}" />
                <TextBlock markupExtensions:View.Bind="Text Text.Count(x => x == 'a')" Margin="1 1 1 10"
                           Foreground="Green" TextWrapping="Wrap" Style="{StaticResource BaseTextBlockStyle}" />

                <TextBlock Text="Custom extension method with args (Text.ExtensionMethod(Text.Count()))" Margin="1"
                           TextWrapping="Wrap" Style="{StaticResource BaseTextBlockStyle}" />
                <TextBlock markupExtensions:View.Bind="Text Text.ExtensionMethod(Text.Count())" Margin="1 1 1 10"
                           Foreground="Green" TextWrapping="Wrap" Style="{StaticResource BaseTextBlockStyle}" />

                <TextBlock Text="LINQ-show second symbol or default (Text.Skip(1).FirstOrDefault())" Margin="1"
                           TextWrapping="Wrap" Style="{StaticResource BaseTextBlockStyle}" />
                <TextBlock markupExtensions:View.Bind="Text Text.Skip(1).FirstOrDefault()" Margin="1 1 1 10"
                           Foreground="Green" TextWrapping="Wrap" Style="{StaticResource BaseTextBlockStyle}" />

                <TextBlock TextWrapping="Wrap"
                           Text="Condition expression ($string.IsNullOrEmpty(Text) ? 'String is empty' : 'String is not empty')"
                           Margin="1" Style="{StaticResource BaseTextBlockStyle}" />
                <TextBlock Foreground="Green" TextWrapping="Wrap"
                           markupExtensions:View.Bind="Text $string.IsNullOrEmpty(Text) ? 'String is empty' : 'String is not empty'"
                           Margin="1 1 1 10" Style="{StaticResource BaseTextBlockStyle}" />

                <TextBlock Text="Arithmetic expression (Text.Count() + 100 + Text.GetHashCode())" Margin="1"
                           TextWrapping="Wrap" Style="{StaticResource BaseTextBlockStyle}" />
                <TextBlock markupExtensions:View.Bind="Text Text.Count() + 100 + Text.GetHashCode()" Margin="1 1 1 10"
                           Foreground="Green" TextWrapping="Wrap" Style="{StaticResource BaseTextBlockStyle}" />

                <TextBlock Text="Null conditional expression (Text?.Trim()?.Length ?? -1)" Margin="1"
                           TextWrapping="Wrap" Style="{StaticResource BaseTextBlockStyle}" />
                <TextBlock markupExtensions:View.Bind="Text NullableText?.Trim()?.Length ?? -1" Margin="1 1 1 10"
                           Foreground="Green"
                           Style="{StaticResource BaseTextBlockStyle}" />

                <TextBlock Text="Interpolated string expression ($'{Text} length {Text.Length}')" Margin="1"
                           TextWrapping="Wrap" Style="{StaticResource BaseTextBlockStyle}" />
                <TextBlock markupExtensions:View.Bind="Text $'{Text} length {Text.Length}'" Margin="1 1 1 10"
                           Foreground="Green"
                           Style="{StaticResource BaseTextBlockStyle}" />
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Page>